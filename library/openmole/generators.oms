import java.text.SimpleDateFormat
import java.util.Date

logger.level("FINE")


// generator params
val generator = Val[String]
val size = Val[Int]

val randomDensity = Val[Double]

val expMixtureCenters = Val[Double]
val expMixtureRadius = Val[Double]
val expMixtureThreshold = Val[Double]

val blocksNumber = Val[Double]
val blocksMinSize = Val[Double]
val blocksMaxSize = Val[Double]

val percolationProba = Val[Double]
val percolationBordPoints = Val[Double]
val percolationLinkWidth = Val[Double]

val replication = Val[Int]
val id = Val[Int]

// Morphology
val height = Val[Double]
val width = Val[Double]
val area = Val[Double]
val moran = Val[Double]
val avgDistance = Val[Double]
val density = Val[Double]
val components = Val[Double]
val avgDetour = Val[Double]
val avgBlockArea = Val[Double]
val avgComponentArea = Val[Double]
val fullDilationSteps = Val[Double]
val fullErosionSteps = Val[Double]
val fullClosingSteps = Val[Double]
val fullOpeningSteps = Val[Double]


val model = ScalaTask("""
    | import _root_.spatialdata.grid.GridGeneratorLauncher
    | import _root_.spatialdata.measures.Morphology
    | import scala.util.Random
    |
    | implicit val rng = new Random(replication)
    |
    | val morpho = GridGeneratorLauncher(
    |   generator,size,randomDensity,
    |   expMixtureCenters.toInt,expMixtureRadius,expMixtureThreshold,
    |   blocksNumber.toInt,blocksMinSize.toInt,blocksMaxSize.toInt,
    |   percolationProba,percolationBordPoints.toInt,percolationLinkWidth
    | )
    |
    | val (height,width,area,moran,avgDistance,density,components,avgDetour,avgBlockArea,avgComponentArea,fullDilationSteps,fullErosionSteps,fullClosingSteps,fullOpeningSteps) = morpho.getMorphology(rng).toTuple
  """.stripMargin
  ) set (
  plugins += pluginsOf(_root_.spatialdata.grid.GridGeneratorLauncher),
  (inputs,outputs) += (generator,size,randomDensity,expMixtureCenters,expMixtureRadius,expMixtureThreshold,blocksNumber,blocksMinSize,blocksMaxSize,percolationProba,percolationBordPoints,percolationLinkWidth,replication,id),
  outputs += (height,width,area,moran,avgDistance,density,components,avgDetour,avgBlockArea,avgComponentArea,fullDilationSteps,fullErosionSteps,fullClosingSteps,fullOpeningSteps)
)


val purpose = "LHS_GRID"
//val purpose = "TEST"


val env = EGIEnvironment("vo.complex-systems.eu")
//val env = LocalEnvironment(4)

val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()))+"_"+purpose+".csv") set (arraysOnSingleRow := true)


val exploration = DirectSampling(
  evaluation = ((model on env by 20) hook indics_hook),
  //evaluation = (model on env hook indics_hook),
  sampling = (
    (LHS(1000,
      randomDensity in Range(0.0,1.0),
      expMixtureCenters in Range(1.0,10.0),
      expMixtureRadius in Range(1.0,20.0),
      expMixtureThreshold in Range(0.0,1.0),
      blocksNumber in Range(1.0,20.0),
      blocksMinSize in Range(1.0,10.0),
      blocksMaxSize in Range(2.0,30.0),
      percolationProba in Range(0.0,1.0),
      percolationBordPoints in Range(1.0,50.0),
      percolationLinkWidth in Range(1.0,5.0)
    ) withIndex id)
    x (generator in Seq("random","expMixture","blocks","percolation"))
    x (size is 50)
    x (replication in (UniformDistribution[Int](10000) take 100))
    //x (replication in (UniformDistribution[Int](10000) take 1))
)
)


exploration
