val pc1objval = 0.307899227735927;val pc2objval = -0.357540683059979;val objnum = 2

import java.util.Date
import java.text.SimpleDateFormat
import scala.io.Source

logger.level("FINE")


// setup data
val rotation = Val[Array[Array[Double]]]
val normalization = Val[Array[Array[Double]]]

val rotationval = Source.fromFile(workDirectory / "setup/pca.csv").getLines().toArray.map{_.split(",").map{_.toDouble}}
val normval = Source.fromFile(workDirectory /  "setup/norm.csv").getLines().toArray.map{_.split(",").map{_.toDouble}}

// params
val size = Val[Int]
val blocksNumber = Val[Int]
val blocksMinSize = Val[Int]
val blocksMaxSize = Val[Int]

val replication = Val[Int]

// objective
val pc1obj = Val[Double]
val pc2obj = Val[Double]
val mse = Val[Double]

val model = ScalaTask("""
    | import _root_.spatialdata.grid.GridGeneratorCalibration._
    | import _root_.spatialdata.measures.Morphology
    | import scala.util.Random
    |
    | implicit val rng = new Random(replication)
    |
    | def projection(morphology: Morphology): Array[Double] = Morphology.rotation(rotation,normalization)(morphology)
    | def objective(pcs: Array[Double]): Double = math.sqrt(math.pow(pcs(0)-pc1obj,2)+math.pow(pcs(1)-pc2obj,2))
    |
    | val mse = CalibrateBlocksGridGenerator(size,blocksNumber,blocksMinSize,blocksMaxSize).calibrate(projection,objective)(rng)
    |
    """.stripMargin
  ) set (
  plugins += pluginsOf(_root_.spatialdata.grid.GridGeneratorCalibration),
  (inputs,outputs) += (size,blocksNumber,blocksMinSize,blocksMaxSize,pc1obj,pc2obj,rotation,normalization,replication),
  outputs += (mse),
  pc1obj := pc1objval,
  pc2obj := pc2objval,
  rotation := rotationval,
  normalization := normval,
  size := 50
)


val modelname = "blocks"
val datestr = (new SimpleDateFormat("yyyyMMdd")).format(new Date()).toString
val purpose = "CALIB_GRID"
//val purpose = "TEST_CALIB"
val resdir = purpose+"_"+modelname+"_"+objnum+"_"+datestr

val env = EGIEnvironment("vo.complex-systems.eu")
//val env = LocalEnvironment(4)


val evolution =
  NSGA2Evolution(
    genome =
      Seq(
        blocksNumber in (1 to 20 by 1),
        blocksMinSize in (1 to 20 by 1),
        blocksMaxSize in (1 to 20 by 1)
      ),
      mu = 50,
      stochastic = Stochastic(seed = replication),
      objectives = Seq(mse),
      evaluation = model,
      termination = 2 hours,
      parallelism = 1000,
      distribution = Island(15 minutes)
)

val savePopulation = SavePopulationHook(evolution, workDirectory / "calib" / resdir)


(evolution on env hook savePopulation)
